//
// Created by Marty Spiewak on 12/27/17.
//

#ifndef C_INTERPRETER_MARTY_SPIEWAK_TOKEN_H
#define C_INTERPRETER_MARTY_SPIEWAK_TOKEN_H

#include <string>

using namespace std;

std::string enumString[] = {
        "AUTO",
        "DOUBLE",
        "INT",
        "STRUCT",
        "CONST",
        "FLOAT",
        "SHORT",
        "UNSIGNED",
        "BREAK",
        "ELSE",
        "LONG",
        "SWITCH",
        "CONTINUE",
        "FOR",
        "SIGNED",
        "VOID",
        "CASE",
        "ENUM",
        "REGISTER",
        "TYPEDEF",
        "DEFAULT",
        "GOTO",
        "SIZEOF",
        "VOLATILE",
        "CHAR",
        "STRING",
        "RETURN",
        "UNION",
        "DO",
        "IF",
        "STATIC",
        "WHILE",
        "IDENT",
        "VARIADIC",
        "OPEN_BRACKET",
        "CLOSE_BRACKET",
        "OPEN_PARENT",
        "CLOSE_PARENT",
        "OPEN_BRACE",
        "CLOSE_BRACE",
        "ADD_OP",
        "SUB_OP",
        "MULT_OP",
        "DIV_OP",
        "MOD_OP",
        "INCREMENT",
        "DECREMENT",
        "PERIOD",
        "ARROW",
        "LOG_NOT",
        "BIT_NOT",
        "ALIGNOF",
        "BIT_LEFT",
        "BIT_RIGHT",
        "LESS_THAN",
        "GREATER_THAN",
        "LESS_THAN_EQUAL",
        "GREATER_THAN_EQUAL",
        "EQUAL",
        "NOT_EQUAL",
        "BIT_AND",
        "BIT_XOR",
        "BIT_OR",
        "LOG_AND",
        "LOG_OR",
        "TERNARY",
        "ASSIGN",
        "ASSIGN_SUM",
        "ASSIGN_DIF",
        "ASSIGN_PROD",
        "ASSIGN_QUOT",
        "ASSIGN_MOD",
        "ASSIGN_LEFT",
        "ASSIGN_RIGHT",
        "ASSIGN_AND",
        "ASSIGN_OR",
        "ASSIGN_XOR",
        "COMMA",
        "COLON",
        "SEMI_COLON",
        "END",
        "LONGCOMMENT",
        "LINECOMMENT",
        "BAD_TOKEN",
        "NOPE",
        "AND",
        "AND_EQ",
        "ASM",
        "BOOL",
        "COMPL",
        "CONST_CAST",
        "DELETE",
        "DYNAMIC_CAST",
        "EXIT",
        "EXPLICIT",
        "EXPORT",
        "EXTERN",
        "FALSE",
        "FRIEND",
        "INLINE",
        "MUTABLE",
        "NAMESPACE",
        "NOT",
        "NOT_EQ",
        "OPERATOR",
        "OR",
        "OR_EQ",
        "PRIVATE",
        "PROTECTED",
        "PUBLIC",
        "REINTERPRET_CAST",
        "STATIC_CAST",
        "TEMPLATE",
        "THIS",
        "THROW",
        "TRUE",
        "TYPEID",
        "TYPENAME",
        "USING",
        "VIRTUAL",
        "WCHAR_T",
        "XOR",
        "XOR_EQ",
        "SCOPE",
        "COND_OP",
        "GROUP_MEM_POINTER",
        "NEW"
};

using namespace std;

class Token {
    public:

    enum TokenType {
        AUTO,
        DOUBLE,
        INT,
        STRUCT,
        CONST,
        FLOAT,
        SHORT,
        UNSIGNED,
        BREAK,
        ELSE,
        LONG,
        SWITCH,
        CONTINUE,
        FOR,
        SIGNED,
        VOID,
        CASE,
        ENUM,
        REGISTER,
        TYPEDEF,
        DEFAULT,
        GOTO,
        SIZEOF,
        VOLATILE,
        CHAR,
        STRING,
        RETURN,
        UNION,
        DO,
        IF,
        STATIC,
        WHILE,
        IDENT,
        VARIADIC,
        OPEN_BRACKET,
        CLOSE_BRACKET,
        OPEN_PARENT,
        CLOSE_PARENT,
        OPEN_BRACE,
        CLOSE_BRACE,
        ADD_OP,
        SUB_OP,
        MULT_OP,
        DIV_OP,
        MOD_OP,
        INCREMENT,
        DECREMENT,
        PERIOD,
        ARROW,
        LOG_NOT,
        BIT_NOT,
        ALIGNOF,
        BIT_LEFT,
        BIT_RIGHT,
        LESS_THAN,
        GREATER_THAN,
        LESS_THAN_EQUAL,
        GREATER_THAN_EQUAL,
        EQUAL,
        NOT_EQUAL,
        BIT_AND,
        BIT_XOR,
        BIT_OR,
        LOG_AND,
        LOG_OR,
        TERNARY,
        ASSIGN,
        ASSIGN_SUM,
        ASSIGN_DIF,
        ASSIGN_PROD,
        ASSIGN_QUOT,
        ASSIGN_MOD,
        ASSIGN_LEFT,
        ASSIGN_RIGHT,
        ASSIGN_AND,
        ASSIGN_OR,
        ASSIGN_XOR,
        COMMA,
        COLON,
        SEMI_COLON,
        END,
        LONGCOMMENT,
        LINECOMMENT,
        BAD_TOKEN,
        NOPE,
        AND,
        AND_EQ,
        ASM,
        BOOL,
        COMPL,
        CONST_CAST,
        DELETE,
        DYNAMIC_CAST,
        EXIT,
        EXPLICIT,
        EXPORT,
        EXTERN,
        FALSE,
        FRIEND,
        INLINE,
        MUTABLE,
        NAMESPACE,
        NOT,
        NOT_EQ,
        OPERATOR,
        OR,
        OR_EQ,
        PRIVATE,
        PROTECTED,
        PUBLIC,
        REINTERPRET_CAST,
        STATIC_CAST,
        TEMPLATE,
        THIS,
        THROW,
        TRUE,
        TYPEID,
        TYPENAME,
        USING,
        VIRTUAL,
        WCHAR_T,
        XOR,
        XOR_EQ,
        SCOPE,
        COND_OP,
        GROUP_MEM_POINTER,
        NEW
    };


    string lexeme;
    TokenType token;

    Token(TokenType type, char value[], int end);
    string getLexeme();
    void setLexeme(string lex);
    TokenType getToken();
    void setToken(TokenType tk);
    string toString();

};


#endif //C_INTERPRETER_MARTY_SPIEWAK_TOKEN_H
